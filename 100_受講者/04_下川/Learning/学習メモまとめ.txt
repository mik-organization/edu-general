スクショ多め
時間があるときにメモを足したり…
作業時間の短縮、箇条書きを意識する
VScodeでMarkdownを記述してQiitaに載せる方法調べる


Qiita参考サイト
https://hnavi.co.jp/knowledge/blog/spring-boot/

https://qiita.com/kotone1998/private/37e48a3196b4761534c9

インストール済みプログラムの確認方法
ファイル→windows(C:)→Program Files(×86)

タイプナンバー(年齢表記時に使う)

なるべくファイル名は大文字から始める(例:Hello.java)

git使用時に保存したいファイルのパスを指定する際は、「.git」という隠しファイルが入っている辺りで止めてパスをコピーする。

ツールはCドライブ直下へ入れる

フォルダアイコン→New→Other→Spring Boot→Spring Starter Project

人間が読める処理→機械が読める処理へ変換することをコンパイル、ビルドという
binファイル(バイナリーファイル)は機械語が入ったファイル

エイリアス→別名、あだ名
Powershell等においてエイリアスをコマンド名として飛び出す設定をプロファイルに直接記載し、ショートカットして呼び出すことで作業効率化を図る
リナックスやデータベースによくある
プロファイル→特定の場所にあるファイル
例　winMeageのエイリアス→git windiff

(重要)こまめにセーブする癖付けする

Eclipse上で、コードが赤く波線が引かれる時はエラー、黄色く波線が引かれる時は警告
説明をする時にしっかりと言い分けるようにする

shoplist.java　型名
shoplist　変数
shoplist()　コンストラクタ

add→メソッド、動作
JPanel→class

mainは神
サブを作る　shimokawa-main
最終的にmainにマージする
mainは基本的に大元で、実際に提供しているサービスにも影響を及ぼす可能性があるため、一旦サブにgitしていく。

winMeage　コードの差分を比較するのに便利
▷　右へコピー
◁　左へコピー　マージするという
git　コンフィグファイル
コンフリクト(競合)している→同時にgitへデータがアップされている状態

Eclipse使用時にコメント等で入力した日本語が横になった時の対応
原因→@MSゴシックのように@がついているものを選択すると横になる
対策→選択時に下にサンプルが表示されるため、確認してから決定する
変更方法→window-Preferences(設定)-General(一般)-Appearance(外観)-Colors and Fonts


https://www.thymeleaf.org/doc/tutorials/2.1/usingthymeleaf_ja.html


〇mvnrepository
https://mvnrepository.com/


〇oracle
〇Thymeleaf

https://www.thymeleaf.org/

https://docs.oracle.com/javase/jp/8/docs/api/

〇Eclipse

※キーの使い方
→ショートカットキー
ctrl＋shift＋O(オー)　importする
・Raptureのキーの使い方
shift＋ctrl　直線が引ける
ctrl　フリーハンド
ctrl＋C　スクショした画像をコピー


※zipファイルとは
→

※ビルドとコンパイルの違い
→

※Javaのファイル名のつけ方
→大文字から始める()

※コメントのつけ方
→

※githubについて(コマンドの意味、Powershellの使い方等)
→

※closeprojectとopenproject
→

※Taskについて(//TODO、TODOリスト等)
→

※アノテーションについて
→

※Markdownについて
→

※Eclipseの使い方について
→
window→Show viewについて
Console、packageExplorerの固定の仕方について

※Spring bootについて
・参考サイト
https://www.sejuku.net/blog/10456
https://qiita.com/koneko59/items/bd34e2707883d8effebe
https://udemy.benesse.co.jp/development/app/spring-boot.html
https://arcuss-service.com/knowledge/about-springboot.html
https://camp.trainocate.co.jp/magazine/spring-boot/
https://and-engineer.com/articles/YkG6zxEAACIAnH8J

※イシューとのタスクの違い
・イシュー意味→「論点、課題、議題、問題点」
・タスク意味→「一定の期間内に成すべき仕事、課題、職務」
・違い→同じ「課題」といった意味がありますが、「イシュー」は解決すべき課題であるのに対して、「タスク」は与えられた課題のこと。「イシュー」は「論点、議題」といった意味を持ち、「タスク」は「任務、職務」といった意味。どちらもビジネスで使うが、「イシュー」は主に会社全体やプロジェクト、商品など物事に対して用いられており「タスク」は主に自分自身に対してや自分が所属するチーム・部署などに対して用いられる。
・英語「issue」の意味と使い方
カタカナ語「イシュー」の語源は英語「issue」になります。
「issue」は日本語にするのが難しいのですが、「人々が考え話している話題や問題」という意味になります。つまり「重要な話題、争点」などと訳すことができます。「問題」というニュアンスで使うこともありますが、必ずしも「issue」は「厄介な問題」という意味ではありません。
「イシュー」には「問題点」といった意味も含まれますが、よく日本語で使われている「問題」との違いは何でしょうか？
それは「イシュー」が持つ「問題」の意味は今後どうしていくか解決すべきことなのに対して、よく用いられる日本語の「問題」は困った事柄など厄介であるものということです。
よって、「問題」というととてもネガティブな響きがありますが、「イシュー」はこれから解決していくものなのでネガティブなことではありません。問題があるのはよくないですが、イシューがあることは改善の余地があるというニュアンスになるのでビジネスの場では基本的によいことになります。
・参考サイト
https://eigobu.jp/magazine/ishu
ビジネスシーンでは「イシューを取り上げる」「イシューを特定する」「イシューを確認する」といったような表現がよく使われています。
「イシュー」は英語であると同時に俗に言うカタカナ語です。
イシュー（Issue） とプロブレム（Problem）の違い

すでに「プレブレム（Problem）と同じなのでは？」と疑問に思っている方もいると思いますが、「プレブレム」は害をもたらす・解決すべき「問題」に対して使われますが、「イシュー」は議論の対象となるべき「課題」に対して使われます。

例えば、自社で販売していた商品がすぐに壊れるといったことは「問題」つまり「プレブレム」となりますが、自社の商品をより壊れないようにするといった「課題」は「イシュー」となります。

イシュー（Issue） とタスク（Task）の違い
また、仕事で頻繁に使われ、意味の似た言葉に「タスク（Task）」がありますが、タスクは「自分が行う作業」といった意味になります。つまり「午前中までに見積もりを送る」「1時から営業会議に参加する」といったものがタスクとなるため、イシューは意味が大きく異なります。
・参考サイト
https://business-textbooks.com/issue/


以下、用語集
〇インスタンス
〇コンストラクタ
〇インターフェース
〇Spring
〇private
〇public
〇git
〇github

デバック→テスト　？