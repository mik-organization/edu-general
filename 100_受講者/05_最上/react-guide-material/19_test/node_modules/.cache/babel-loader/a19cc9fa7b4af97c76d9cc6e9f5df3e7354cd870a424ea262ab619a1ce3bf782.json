{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Documents\\\\work\\\\react-guide-material\\\\19_test\\\\src\\\\055_practice_userEvent\\\\start\\\\components\\\\Message.test.js\";\nimport { render, screen } from \"@testing-library/react\";\nimport Message from \"./Message\";\nimport userEvent from \"@testing-library/user-event\";\n\n/*\r\nstartフォルダ内にあるcomponentsフォルダにテストファイルを作成して、\r\nMessageコンポーネントのテストをおこなってください。\r\nテストは以下のQ1・Q2に従って作成してください。\r\nQ1.画面内にinput要素が表示されていることをテストしてください。\r\nQ2.input要素に値を入れると正しく値が更新されることをテストしてください。\r\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndescribe('Messageコンポーネントの動作確認', () => {\n  describe('画面操作正常性確認', () => {\n    test('input要素が表示されていること', () => {\n      render( /*#__PURE__*/_jsxDEV(Message, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 20\n      }, this));\n      const inputEl = screen.getByRole('textbox');\n      expect(inputEl).toBeInTheDocument();\n    });\n  });\n  describe('画面操作正常性確認', () => {\n    test('入力値の挿入で値が更新される', async () => {\n      const user = userEvent.setup();\n      render( /*#__PURE__*/_jsxDEV(Message, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 20\n      }, this));\n      const inputEl = screen.getByRole('textbox');\n      expect(inputEl.value).toBe(\"\");\n      await user.type(inputEl, 'こんにちは');\n      expect(inputEl.value).toBe('こんにちは');\n    });\n  });\n});\n\n//  模範解答\ndescribe('Messageコンポーネントの動作確認', () => {\n  describe('画面操作正常性確認', () => {\n    test('input要素が存在するか', () => {\n      render( /*#__PURE__*/_jsxDEV(Message, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 20\n      }, this));\n      const inputEl = screen.getByRole('textbox');\n      expect(inputEl).toBeInTheDocument();\n    });\n  });\n  describe('画面操作正常性確認', () => {\n    test('inputのstateが更新され、値が正しく変更されているか', async () => {\n      const user = userEvent.setup();\n      render( /*#__PURE__*/_jsxDEV(Message, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 20\n      }, this));\n      const inputEl = screen.getByRole('textbox');\n      expect(inputEl.value).toBe(\"\");\n      await user.type(inputEl, 'こんにちは');\n      expect(inputEl.value).toBe('こんにちは');\n    });\n  });\n});","map":{"version":3,"names":["render","screen","Message","userEvent","jsxDEV","_jsxDEV","describe","test","fileName","_jsxFileName","lineNumber","columnNumber","inputEl","getByRole","expect","toBeInTheDocument","user","setup","value","toBe","type"],"sources":["C:/Users/user/Documents/work/react-guide-material/19_test/src/055_practice_userEvent/start/components/Message.test.js"],"sourcesContent":["import { render, screen } from \"@testing-library/react\";\r\nimport Message from \"./Message\";\r\nimport userEvent from \"@testing-library/user-event\";\r\n\r\n/*\r\nstartフォルダ内にあるcomponentsフォルダにテストファイルを作成して、\r\nMessageコンポーネントのテストをおこなってください。\r\nテストは以下のQ1・Q2に従って作成してください。\r\nQ1.画面内にinput要素が表示されていることをテストしてください。\r\nQ2.input要素に値を入れると正しく値が更新されることをテストしてください。\r\n*/\r\ndescribe('Messageコンポーネントの動作確認', () => {\r\n    describe('画面操作正常性確認', () => {\r\n        test('input要素が表示されていること', () => {\r\n            render(<Message />);\r\n            const inputEl = screen.getByRole('textbox');\r\n            expect(inputEl).toBeInTheDocument();\r\n        });\r\n    });\r\n\r\n    describe('画面操作正常性確認', () => {\r\n        test('入力値の挿入で値が更新される', async () => {\r\n            const user = userEvent.setup();\r\n            render(<Message />);\r\n            const inputEl = screen.getByRole('textbox')\r\n\r\n            expect(inputEl.value).toBe(\"\"); \r\n            await user.type(inputEl, 'こんにちは');\r\n\r\n            expect(inputEl.value).toBe('こんにちは');\r\n        });  \r\n    });  \r\n\r\n});\r\n\r\n\r\n//  模範解答\r\ndescribe('Messageコンポーネントの動作確認', () => {\r\n    describe('画面操作正常性確認', () => {\r\n        test('input要素が存在するか', () => {\r\n            render(<Message />);\r\n            const inputEl = screen.getByRole('textbox');\r\n            expect(inputEl).toBeInTheDocument();\r\n        });\r\n    });\r\n\r\n    describe('画面操作正常性確認', () => {\r\n        test('inputのstateが更新され、値が正しく変更されているか', async () => {\r\n            const user = userEvent.setup();\r\n            render(<Message />);\r\n            const inputEl = screen.getByRole('textbox')\r\n\r\n            expect(inputEl.value).toBe(\"\"); \r\n            await user.type(inputEl, 'こんにちは');\r\n\r\n            expect(inputEl.value).toBe('こんにちは');\r\n        });  \r\n    });  \r\n\r\n});"],"mappings":";AAAA,SAASA,MAAM,EAAEC,MAAM,QAAQ,wBAAwB;AACvD,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,SAAS,MAAM,6BAA6B;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AANA,SAAAC,MAAA,IAAAC,OAAA;AAOAC,QAAQ,CAAC,qBAAqB,EAAE,MAAM;EAClCA,QAAQ,CAAC,WAAW,EAAE,MAAM;IACxBC,IAAI,CAAC,mBAAmB,EAAE,MAAM;MAC5BP,MAAM,eAACK,OAAA,CAACH,OAAO;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,CAAC;MACnB,MAAMC,OAAO,GAAGX,MAAM,CAACY,SAAS,CAAC,SAAS,CAAC;MAC3CC,MAAM,CAACF,OAAO,CAAC,CAACG,iBAAiB,CAAC,CAAC;IACvC,CAAC,CAAC;EACN,CAAC,CAAC;EAEFT,QAAQ,CAAC,WAAW,EAAE,MAAM;IACxBC,IAAI,CAAC,gBAAgB,EAAE,YAAY;MAC/B,MAAMS,IAAI,GAAGb,SAAS,CAACc,KAAK,CAAC,CAAC;MAC9BjB,MAAM,eAACK,OAAA,CAACH,OAAO;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,CAAC;MACnB,MAAMC,OAAO,GAAGX,MAAM,CAACY,SAAS,CAAC,SAAS,CAAC;MAE3CC,MAAM,CAACF,OAAO,CAACM,KAAK,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;MAC9B,MAAMH,IAAI,CAACI,IAAI,CAACR,OAAO,EAAE,OAAO,CAAC;MAEjCE,MAAM,CAACF,OAAO,CAACM,KAAK,CAAC,CAACC,IAAI,CAAC,OAAO,CAAC;IACvC,CAAC,CAAC;EACN,CAAC,CAAC;AAEN,CAAC,CAAC;;AAGF;AACAb,QAAQ,CAAC,qBAAqB,EAAE,MAAM;EAClCA,QAAQ,CAAC,WAAW,EAAE,MAAM;IACxBC,IAAI,CAAC,eAAe,EAAE,MAAM;MACxBP,MAAM,eAACK,OAAA,CAACH,OAAO;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,CAAC;MACnB,MAAMC,OAAO,GAAGX,MAAM,CAACY,SAAS,CAAC,SAAS,CAAC;MAC3CC,MAAM,CAACF,OAAO,CAAC,CAACG,iBAAiB,CAAC,CAAC;IACvC,CAAC,CAAC;EACN,CAAC,CAAC;EAEFT,QAAQ,CAAC,WAAW,EAAE,MAAM;IACxBC,IAAI,CAAC,gCAAgC,EAAE,YAAY;MAC/C,MAAMS,IAAI,GAAGb,SAAS,CAACc,KAAK,CAAC,CAAC;MAC9BjB,MAAM,eAACK,OAAA,CAACH,OAAO;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,CAAC;MACnB,MAAMC,OAAO,GAAGX,MAAM,CAACY,SAAS,CAAC,SAAS,CAAC;MAE3CC,MAAM,CAACF,OAAO,CAACM,KAAK,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;MAC9B,MAAMH,IAAI,CAACI,IAAI,CAACR,OAAO,EAAE,OAAO,CAAC;MAEjCE,MAAM,CAACF,OAAO,CAACM,KAAK,CAAC,CAACC,IAAI,CAAC,OAAO,CAAC;IACvC,CAAC,CAAC;EACN,CAAC,CAAC;AAEN,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}