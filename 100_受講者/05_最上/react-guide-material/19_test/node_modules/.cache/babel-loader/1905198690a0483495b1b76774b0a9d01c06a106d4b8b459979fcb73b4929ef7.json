{"ast":null,"code":"import { counterReducer } from \"./counterReducer\";\nconst initState = {\n  count: 0,\n  step: 1\n};\ndescribe('counterReducerの動作確認', () => {\n  //     test('up', () => {\n  //         const newState = counterReducer(initState, { tyep: 'up' })\n  //         expect(newState).toEqual({ count: 0, step: 1}); \n  //     });\n\n  //     test('down', () => {\n  //         const newState = counterReducer(initState, { tyep: 'down' })\n  //         expect(newState).toEqual({ count: 0, step: 1}); \n  //     });\n\n  //     test('changeStep -> up', () => {\n  //         let newState = counterReducer(initState, { tyep: 'changeStep', payload: 2 })\n\n  //         expect(newState).toEqual({ count: 0, step: 1}); \n\n  //         newState = counterReducer(initState, { tyep: 'up' })\n\n  //         expect(newState).toEqual({ count: 0, step: 1}); \n\n  //         expect(newState.count).toBe(0); \n  //         expect(newState.step).toBe(1); \n\n  //     });\n  // })\n\n  // POINT コンポーネント以外の関数をテストするには？\n  // import { counterReducer } from \"./counterReducer\";\n\n  // const initState = { count: 0, step: 1 }\n  // describe('counterReducerの動作確認', () => {\n  test('up', () => {\n    const newState = counterReducer(initState, {\n      type: 'up'\n    });\n    expect(newState).toEqual({\n      count: 1,\n      step: 1\n    });\n  });\n  test('down', () => {\n    const newState = counterReducer(initState, {\n      type: 'down'\n    });\n    expect(newState).toEqual({\n      count: -1,\n      step: 1\n    });\n  });\n  test('changeStep -> up', () => {\n    let newState = counterReducer(initState, {\n      type: 'changeStep',\n      payload: 2\n    });\n    expect(newState).toEqual({\n      count: 0,\n      step: 2\n    });\n    newState = counterReducer(newState, {\n      type: 'up'\n    });\n    expect(newState).toEqual({\n      count: 2,\n      step: 2\n    });\n    expect(newState.count).toBe(2);\n    expect(newState.step).toBe(2);\n  });\n});","map":{"version":3,"names":["counterReducer","initState","count","step","describe","test","newState","type","expect","toEqual","payload","toBe"],"sources":["C:/Users/user/Documents/work/react-guide-material/19_test/src/045_pure_fn_test/start/reducer/counterReducer.test.js"],"sourcesContent":["import { counterReducer } from \"./counterReducer\";\r\n\r\nconst initState = { count: 0, step: 1 };\r\n\r\ndescribe('counterReducerの動作確認', () => {\r\n   \r\n//     test('up', () => {\r\n//         const newState = counterReducer(initState, { tyep: 'up' })\r\n//         expect(newState).toEqual({ count: 0, step: 1}); \r\n//     });\r\n\r\n//     test('down', () => {\r\n//         const newState = counterReducer(initState, { tyep: 'down' })\r\n//         expect(newState).toEqual({ count: 0, step: 1}); \r\n//     });\r\n\r\n//     test('changeStep -> up', () => {\r\n//         let newState = counterReducer(initState, { tyep: 'changeStep', payload: 2 })\r\n        \r\n//         expect(newState).toEqual({ count: 0, step: 1}); \r\n\r\n//         newState = counterReducer(initState, { tyep: 'up' })\r\n\r\n//         expect(newState).toEqual({ count: 0, step: 1}); \r\n        \r\n//         expect(newState.count).toBe(0); \r\n//         expect(newState.step).toBe(1); \r\n\r\n\r\n//     });\r\n// })\r\n\r\n\r\n// POINT コンポーネント以外の関数をテストするには？\r\n// import { counterReducer } from \"./counterReducer\";\r\n\r\n// const initState = { count: 0, step: 1 }\r\n// describe('counterReducerの動作確認', () => {\r\n    test('up', () => {\r\n        const newState = counterReducer(initState, { type: 'up' });\r\n        expect(newState).toEqual({ count: 1, step: 1});\r\n    });\r\n    test('down', () => {\r\n        const newState = counterReducer(initState, { type: 'down' });\r\n        expect(newState).toEqual({ count: -1, step: 1 });\r\n    });\r\n    test('changeStep -> up', () => {\r\n        let newState = counterReducer(initState, { type: 'changeStep', payload: 2 });\r\n        \r\n        expect(newState).toEqual({ count: 0, step: 2 });\r\n\r\n        newState = counterReducer(newState, { type: 'up' });\r\n\r\n        expect(newState).toEqual({ count: 2, step: 2 });\r\n\r\n        expect(newState.count).toBe(2);\r\n        expect(newState.step).toBe(2);\r\n    });\r\n})"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AAEjD,MAAMC,SAAS,GAAG;EAAEC,KAAK,EAAE,CAAC;EAAEC,IAAI,EAAE;AAAE,CAAC;AAEvCC,QAAQ,CAAC,qBAAqB,EAAE,MAAM;EAEtC;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;;EAEA;;EAEA;;EAEA;EACA;;EAGA;EACA;;EAGA;EACA;;EAEA;EACA;EACIC,IAAI,CAAC,IAAI,EAAE,MAAM;IACb,MAAMC,QAAQ,GAAGN,cAAc,CAACC,SAAS,EAAE;MAAEM,IAAI,EAAE;IAAK,CAAC,CAAC;IAC1DC,MAAM,CAACF,QAAQ,CAAC,CAACG,OAAO,CAAC;MAAEP,KAAK,EAAE,CAAC;MAAEC,IAAI,EAAE;IAAC,CAAC,CAAC;EAClD,CAAC,CAAC;EACFE,IAAI,CAAC,MAAM,EAAE,MAAM;IACf,MAAMC,QAAQ,GAAGN,cAAc,CAACC,SAAS,EAAE;MAAEM,IAAI,EAAE;IAAO,CAAC,CAAC;IAC5DC,MAAM,CAACF,QAAQ,CAAC,CAACG,OAAO,CAAC;MAAEP,KAAK,EAAE,CAAC,CAAC;MAAEC,IAAI,EAAE;IAAE,CAAC,CAAC;EACpD,CAAC,CAAC;EACFE,IAAI,CAAC,kBAAkB,EAAE,MAAM;IAC3B,IAAIC,QAAQ,GAAGN,cAAc,CAACC,SAAS,EAAE;MAAEM,IAAI,EAAE,YAAY;MAAEG,OAAO,EAAE;IAAE,CAAC,CAAC;IAE5EF,MAAM,CAACF,QAAQ,CAAC,CAACG,OAAO,CAAC;MAAEP,KAAK,EAAE,CAAC;MAAEC,IAAI,EAAE;IAAE,CAAC,CAAC;IAE/CG,QAAQ,GAAGN,cAAc,CAACM,QAAQ,EAAE;MAAEC,IAAI,EAAE;IAAK,CAAC,CAAC;IAEnDC,MAAM,CAACF,QAAQ,CAAC,CAACG,OAAO,CAAC;MAAEP,KAAK,EAAE,CAAC;MAAEC,IAAI,EAAE;IAAE,CAAC,CAAC;IAE/CK,MAAM,CAACF,QAAQ,CAACJ,KAAK,CAAC,CAACS,IAAI,CAAC,CAAC,CAAC;IAC9BH,MAAM,CAACF,QAAQ,CAACH,IAAI,CAAC,CAACQ,IAAI,CAAC,CAAC,CAAC;EACjC,CAAC,CAAC;AACN,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}