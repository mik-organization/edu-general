{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Documents\\\\work\\\\react-guide-material\\\\10_functional_programming\\\\src\\\\030_immutability\\\\start\\\\Example.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Example = () => {\n  // 関数型（純粋関数）\n  // ・fn(決まった引数) -> 決まった戻り値\n  // ・関数外の状態（データ）は参照・変更しない。\n  // ・関数外の影響を及ぼさない。\n  // ・引数で渡された値を変更しない。(Immutability)\n  // 上記の要件を満たさない操作を「副作用」と呼ぶ。\n\n  const num = {\n    val: 2\n  };\n  const double = num => {\n    const newNum = {\n      val: num.val * 2\n    };\n    // newNum.val = num.val * 2;\n    return newNum;\n  };\n  const newNum = double(num);\n  console.log('newNum', newNum, 'num', num);\n  console.log(newNum === num);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\u4E0D\\u5909\\u6027\\uFF08Immutability\\uFF09\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u5F15\\u6570\\u3067\\u6E21\\u3063\\u3066\\u304D\\u305F\\u30AA\\u30D6\\u30B8\\u30A7\\u30AF\\u30C8\\u3092\\u5909\\u66F4\\u3057\\u306A\\u3044\\uFF01\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Immutability\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_c = Example;\nexport default Example;\nvar _c;\n$RefreshReg$(_c, \"Example\");","map":{"version":3,"names":["Example","num","val","double","newNum","console","log","_jsxDEV","_Fragment","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/user/Documents/work/react-guide-material/10_functional_programming/src/030_immutability/start/Example.js"],"sourcesContent":["const Example = () => {\r\n  // 関数型（純粋関数）\r\n  // ・fn(決まった引数) -> 決まった戻り値\r\n  // ・関数外の状態（データ）は参照・変更しない。\r\n  // ・関数外の影響を及ぼさない。\r\n  // ・引数で渡された値を変更しない。(Immutability)\r\n  // 上記の要件を満たさない操作を「副作用」と呼ぶ。\r\n\r\n  const num = { val: 2 }\r\n  const double = (num) => {\r\n    const newNum = {val: num.val * 2};\r\n    // newNum.val = num.val * 2;\r\n    return newNum;\r\n  } \r\n\r\n  const newNum = double(num);\r\n  console.log('newNum',newNum,'num',num);\r\n  console.log(newNum === num);\r\n\r\n  return (\r\n    <>\r\n      <h3>不変性（Immutability）</h3>\r\n      <p>引数で渡ってきたオブジェクトを変更しない！</p>\r\n      <div>Immutability{}</div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Example;\r\n"],"mappings":";;;AAAA,MAAMA,OAAO,GAAGA,CAAA,KAAM;EACpB;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMC,GAAG,GAAG;IAAEC,GAAG,EAAE;EAAE,CAAC;EACtB,MAAMC,MAAM,GAAIF,GAAG,IAAK;IACtB,MAAMG,MAAM,GAAG;MAACF,GAAG,EAAED,GAAG,CAACC,GAAG,GAAG;IAAC,CAAC;IACjC;IACA,OAAOE,MAAM;EACf,CAAC;EAED,MAAMA,MAAM,GAAGD,MAAM,CAACF,GAAG,CAAC;EAC1BI,OAAO,CAACC,GAAG,CAAC,QAAQ,EAACF,MAAM,EAAC,KAAK,EAACH,GAAG,CAAC;EACtCI,OAAO,CAACC,GAAG,CAACF,MAAM,KAAKH,GAAG,CAAC;EAE3B,oBACEM,OAAA,CAAAC,SAAA;IAAAC,QAAA,gBACEF,OAAA;MAAAE,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1BN,OAAA;MAAAE,QAAA,EAAG;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAC5BN,OAAA;MAAAE,QAAA,EAAK;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC;EAAA,eACzB,CAAC;AAEP,CAAC;AAACC,EAAA,GA1BId,OAAO;AA4Bb,eAAeA,OAAO;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}