{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Documents\\\\work\\\\react-guide-material\\\\11_hooks_p1\\\\src\\\\070_practice_useContext\\\\start\\\\Example.js\";\nimport { CalcProvider } from \"./context/CalcContext\";\nimport Input from \"./components/Input\";\nimport Select from \"./components/CalcSelect\";\nimport Result from \"./components/CalcResult\";\n\n// import { useReducer } from \"react\";\n\n// const CALC_OPTIONS = [\"add\", \"minus\", \"divide\", \"multiply\"];\n\n// const reducer = (state, { type, payload }) => {\n//   switch (type) {\n//     case \"change\": {\n//       const { name, value } = payload;\n//       return { ...state, [name]: value };\n//     }\n//     case \"add\": {\n//       return { ...state, result: state.a + state.b };\n//     }\n//     case \"minus\": {\n//       return { ...state, result: state.a - state.b };\n//     }\n//     case \"divide\": {\n//       return { ...state, result: state.a / state.b };\n//     }\n//     case \"multiply\": {\n//       return { ...state, result: state.a * state.b };\n//     }\n//     default:\n//       throw new Error(\"operator is invalid\");\n//   }\n// };\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Example = () => {\n  //   const initState = {\n  //     a: 1,\n  //     b: 2,\n  //     result: 3,\n  //   };\n\n  // const [state, dispatch] = useReducer(reducer, initState);\n\n  // const calculate = (e) => {\n  //   dispatch({type: e.target.value});\n  // };\n  // const numChangeHandler = (e) => {\n  //   dispatch({type: 'change', payload: {name: e.target.name, value: e.target.value}});\n  // };\n  return (\n    /*#__PURE__*/\n    /* 完成系のJSX */\n    _jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(CalcProvider, {\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          name: \"a\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          name: \"b\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Select, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Result, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 5\n      }, this)\n    }, void 0, false)\n  );\n  {/* <h3>練習問題</h3>\r\n   <p>Example内のコードをコンポーネントに分割してください。また、ステートはContext経由でやり取りしてください。</p> */}\n  {/* <div>\r\n    a:\r\n    <input\r\n      type=\"number\"\r\n      name=\"a\"\r\n      value={state.a}\r\n      onChange={numChangeHandler}\r\n    />\r\n   </div> */}\n  {/* <div>\r\n    b:\r\n    <input\r\n      type=\"number\"\r\n      name=\"b\"\r\n      value={state.b}\r\n      onChange={numChangeHandler}\r\n    />\r\n   </div> */}\n  {/* <select value={state.type} name=\"type\" onChange={calculate}>\r\n    {CALC_OPTIONS.map((type) => (\r\n      <option key={type} value={type}>\r\n        {type}\r\n      </option>\r\n    ))}\r\n   </select> */}\n  {/* <h3>結果：{state.result}</h3> */}\n  {/* </> */}\n};\n_c = Example;\nexport default Example;\nvar _c;\n$RefreshReg$(_c, \"Example\");","map":{"version":3,"names":["CalcProvider","Input","Select","Result","jsxDEV","_jsxDEV","Fragment","_Fragment","Example","children","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/user/Documents/work/react-guide-material/11_hooks_p1/src/070_practice_useContext/start/Example.js"],"sourcesContent":["import { CalcProvider } from \"./context/CalcContext\"\r\nimport Input from \"./components/Input\"\r\nimport Select from \"./components/CalcSelect\"\r\nimport Result from \"./components/CalcResult\"\r\n\r\n// import { useReducer } from \"react\";\r\n\r\n// const CALC_OPTIONS = [\"add\", \"minus\", \"divide\", \"multiply\"];\r\n\r\n// const reducer = (state, { type, payload }) => {\r\n//   switch (type) {\r\n//     case \"change\": {\r\n//       const { name, value } = payload;\r\n//       return { ...state, [name]: value };\r\n//     }\r\n//     case \"add\": {\r\n//       return { ...state, result: state.a + state.b };\r\n//     }\r\n//     case \"minus\": {\r\n//       return { ...state, result: state.a - state.b };\r\n//     }\r\n//     case \"divide\": {\r\n//       return { ...state, result: state.a / state.b };\r\n//     }\r\n//     case \"multiply\": {\r\n//       return { ...state, result: state.a * state.b };\r\n//     }\r\n//     default:\r\n//       throw new Error(\"operator is invalid\");\r\n//   }\r\n// };\r\n\r\nconst Example = () => {\r\n//   const initState = {\r\n//     a: 1,\r\n//     b: 2,\r\n//     result: 3,\r\n//   };\r\n\r\n  // const [state, dispatch] = useReducer(reducer, initState);\r\n\r\n  // const calculate = (e) => {\r\n  //   dispatch({type: e.target.value});\r\n  // };\r\n  // const numChangeHandler = (e) => {\r\n  //   dispatch({type: 'change', payload: {name: e.target.name, value: e.target.value}});\r\n  // };\r\n  return (\r\n    /* 完成系のJSX */\r\n    <>\r\n    <CalcProvider>\r\n      <Input name=\"a\"/>      \r\n      <Input name=\"b\" />      \r\n      <Select />\r\n      <Result />      \r\n    </CalcProvider>\r\n    </>\r\n  )\r\n      {/* <h3>練習問題</h3>\r\n      <p>Example内のコードをコンポーネントに分割してください。また、ステートはContext経由でやり取りしてください。</p> */}\r\n      {/* <div>\r\n        a:\r\n        <input\r\n          type=\"number\"\r\n          name=\"a\"\r\n          value={state.a}\r\n          onChange={numChangeHandler}\r\n        />\r\n      </div> */}\r\n      {/* <div>\r\n        b:\r\n        <input\r\n          type=\"number\"\r\n          name=\"b\"\r\n          value={state.b}\r\n          onChange={numChangeHandler}\r\n        />\r\n      </div> */}\r\n      {/* <select value={state.type} name=\"type\" onChange={calculate}>\r\n        {CALC_OPTIONS.map((type) => (\r\n          <option key={type} value={type}>\r\n            {type}\r\n          </option>\r\n        ))}\r\n      </select> */}\r\n      {/* <h3>結果：{state.result}</h3> */}\r\n    {/* </> */}\r\n  \r\n};\r\n\r\nexport default Example;\r\n"],"mappings":";AAAA,SAASA,YAAY,QAAQ,uBAAuB;AACpD,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,MAAM,MAAM,yBAAyB;AAC5C,OAAOC,MAAM,MAAM,yBAAyB;;AAE5C;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEA,MAAMC,OAAO,GAAGA,CAAA,KAAM;EACtB;EACA;EACA;EACA;EACA;;EAEE;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;IAAA;IACE;IACAH,OAAA,CAAAE,SAAA;MAAAE,QAAA,eACAJ,OAAA,CAACL,YAAY;QAAAS,QAAA,gBACXJ,OAAA,CAACJ,KAAK;UAACS,IAAI,EAAC;QAAG;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,eACjBT,OAAA,CAACJ,KAAK;UAACS,IAAI,EAAC;QAAG;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAClBT,OAAA,CAACH,MAAM;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACVT,OAAA,CAACF,MAAM;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE;IAAC,gBACb;EAAC;EAED,CAAC;AACP,wEADO;EAED,CAAC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YARO;EASD,CAAC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YARO;EASD,CAAC;AACP;AACA;AACA;AACA;AACA;AACA,eANO;EAOD,CAAC;EACH,CAAC;AAEL,CAAC;AAACC,EAAA,GAxDIP,OAAO;AA0Db,eAAeA,OAAO;AAAC,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}